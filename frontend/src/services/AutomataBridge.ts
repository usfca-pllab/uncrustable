/**
 * AutomataBridge.ts
 *
 * This file provides a bridge to the Rust automata WASM module.
 * It's responsible for:
 * 1. Processing automata programs for DFA generation
 * 2. Converting DFA structure into Mermaid diagram syntax
 */

/**
 * Define the structure of a DFA state with transitions
 */
interface DfaState {
  id: string;
  label: string;
  isAccepting: boolean;
  isInitial: boolean;
  transitions: {
    symbol: string;
    target: string;
  }[];
}

/**
 * Define the structure of a DFA
 */
interface Dfa {
  states: DfaState[];
  alphabet: string[];
}

/**
 * Example DFA for the div3.un program
 * This would normally be generated by calling the Rust WASM module
 */
const DIV3_DFA: Dfa = {
  states: [
    {
      id: '0',
      label: 'Remainder 0',
      isAccepting: true,
      isInitial: true,
      transitions: [
        { symbol: '0', target: '0' },
        { symbol: '1', target: '1' }
      ]
    },
    {
      id: '1',
      label: 'Remainder 1',
      isAccepting: false,
      isInitial: false,
      transitions: [
        { symbol: '0', target: '2' },
        { symbol: '1', target: '0' }
      ]
    },
    {
      id: '2',
      label: 'Remainder 2',
      isAccepting: false,
      isInitial: false,
      transitions: [
        { symbol: '0', target: '1' },
        { symbol: '1', target: '2' }
      ]
    }
  ],
  alphabet: ['0', '1']
};

/**
 * Parse an automata program and return a DFA
 * This is a mock implementation that always returns the div3 DFA
 * TODO: Implement WASM integration with actual Rust module
 */
export const parseAutomataProgram = async (program: string): Promise<Dfa> => {
  console.log('Parsing automata program:', program);

  // In a real implementation, this would call the Rust WASM module
  // For now, we'll just return the example DFA
  return DIV3_DFA;
};

/**
 * Convert a DFA to a Mermaid diagram
 *
 * @param dfa The DFA to convert
 * @returns Mermaid diagram syntax as a string
 */
export const dfaToMermaid = (dfa: Dfa): string => {
  // Ensure state IDs don't have special characters that might break Mermaid
  const sanitizeId = (id: string) => id.replace(/[^a-zA-Z0-9]/g, '_');

  // Start with the proper Mermaid state diagram definition
  let mermaidCode = `stateDiagram-v2\n`;
  mermaidCode += `    direction LR\n\n`;

  // Add states with labels - make sure they have valid identifiers
  dfa.states.forEach(state => {
    const stateId = sanitizeId(`s${state.id}`);
    const stateLabel = state.label.replace(/"/g, ''); // Remove quotes that could break syntax
    mermaidCode += `    ${stateId}: "${stateLabel}"\n`;
  });

  mermaidCode += '\n';

  // Mark initial state
  const initialState = dfa.states.find(s => s.isInitial);
  if (initialState) {
    mermaidCode += `    [*] --> ${sanitizeId(`s${initialState.id}`)}\n\n`;
  }

  // Mark accepting states with notes
  const acceptingStates = dfa.states.filter(s => s.isAccepting);
  if (acceptingStates.length > 0) {
    acceptingStates.forEach(state => {
      mermaidCode += `    note right of ${sanitizeId(`s${state.id}`)}: Accepting State\n`;
    });
    mermaidCode += '\n';
  }

  // Add transitions
  dfa.states.forEach(state => {
    const sourceId = sanitizeId(`s${state.id}`);
    state.transitions.forEach(transition => {
      const targetId = sanitizeId(`s${transition.target}`);
      const symbol = transition.symbol.replace(/"/g, ''); // Sanitize symbol
      mermaidCode += `    ${sourceId} --> ${targetId}: "${symbol}"\n`;
    });
  });

  console.log('Generated Mermaid code:', mermaidCode);
  return mermaidCode;
};

/**
 * Generate a Mermaid diagram from an automata program
 * This function connects the parsing and diagram generation
 *
 * @param program The automata program code
 * @returns Mermaid diagram syntax as a string
 */
export const generateDiagramFromProgram = async (program: string): Promise<string> => {
  try {
    if (!program || program.trim() === '') {
      throw new Error('Empty automata program');
    }

    const dfa = await parseAutomataProgram(program);
    if (!dfa || !dfa.states || dfa.states.length === 0) {
      throw new Error('Invalid DFA: no states defined');
    }

    return dfaToMermaid(dfa);
  } catch (error) {
    console.error('Error generating diagram:', error);
    throw error;
  }
};